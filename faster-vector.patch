--- caffe-rc3/include/caffe/util/mkl_alternate.hpp.org	2016-07-10 15:58:16.307061495 +0000
+++ caffe-rc3/include/caffe/util/mkl_alternate.hpp	2016-07-10 16:05:01.872883757 +0000
@@ -18,15 +18,15 @@
 // be in the form e.g. y[i] = sqrt(a[i])
 #define DEFINE_VSL_UNARY_FUNC(name, operation) \
   template<typename Dtype> \
-  void v##name(const int n, const Dtype* a, Dtype* y) { \
+  void __attribute__((target_clones("arch=core-avx2","default"))) v##name(const int n, const Dtype* a, Dtype* y) { \
     CHECK_GT(n, 0); CHECK(a); CHECK(y); \
     for (int i = 0; i < n; ++i) { operation; } \
   } \
-  inline void vs##name( \
+  inline __attribute__((target_clones("arch=core-avx2","default"))) void vs##name( \
     const int n, const float* a, float* y) { \
     v##name<float>(n, a, y); \
   } \
-  inline void vd##name( \
+  inline __attribute__((target_clones("arch=core-avx2","default"))) void vd##name( \
       const int n, const double* a, double* y) { \
     v##name<double>(n, a, y); \
   }
@@ -59,16 +57,16 @@
 // be in the form e.g. y[i] = a[i] + b[i]
 #define DEFINE_VSL_BINARY_FUNC(name, operation) \
   template<typename Dtype> \
-  void v##name(const int n, const Dtype* a, const Dtype* b, Dtype* y) { \
+  void __attribute__((target_clones("arch=core-avx2","default"))) v##name(const int n, const Dtype* __restrict__ a, const Dtype* __restrict__ b, Dtype* __restrict__ y) { \
     CHECK_GT(n, 0); CHECK(a); CHECK(b); CHECK(y); \
     for (int i = 0; i < n; ++i) { operation; } \
   } \
-  inline void vs##name( \
-    const int n, const float* a, const float* b, float* y) { \
+  inline __attribute__((target_clones("arch=core-avx2","default"))) void vs##name( \
+    const int n, const float* __restrict__ a, const float* __restrict__ b, float* __restrict__ y) { \
     v##name<float>(n, a, b, y); \
   } \
-  inline void vd##name( \
-      const int n, const double* a, const double* b, double* y) { \
+  inline __attribute__((target_clones("arch=core-avx2","default"))) void vd##name( \
+      const int n, const double* __restrict__ a, const double* __restrict__ b, double* __restrict__ y) { \
     v##name<double>(n, a, b, y); \
   }
 
