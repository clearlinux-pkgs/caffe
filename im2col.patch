diff --git a/src/caffe/util/im2col.cpp b/src/caffe/util/im2col.cpp
index 114a86c..7dcc12a 100644
--- a/src/caffe/util/im2col.cpp
+++ b/src/caffe/util/im2col.cpp
@@ -1,3 +1,5 @@
+#pragma GCC optimize("O3")
+
 #include <vector>
 
 #include "caffe/util/im2col.hpp"
@@ -15,6 +17,47 @@ inline bool is_a_ge_zero_and_a_lt_b(int a, int b) {
   return static_cast<unsigned>(a) < static_cast<unsigned>(b);
 }
 
+
+
+
+template <typename Dtype>
+void im2col_cpu_one_one(const Dtype* data_im, const int channels,
+    const int height, const int width, const int kernel_h, const int kernel_w,
+    const int pad_h, const int pad_w,
+    Dtype* data_col) {
+  const int output_h = (height + 2 * pad_h - ((kernel_h - 1) + 1)) + 1;
+  const int output_w = (width + 2 * pad_w - ((kernel_w - 1) + 1)) + 1;
+  const int channel_size = height * width;
+  
+  memset(data_col, 0, channel_size * sizeof(Dtype));
+  
+  for (int channel = channels; channel--; data_im += channel_size) {
+    for (int kernel_row = 0; kernel_row < kernel_h; kernel_row++) {
+      for (int kernel_col = 0; kernel_col < kernel_w; kernel_col++) {
+        int input_row = -pad_h + kernel_row;
+        for (int output_rows = output_h; output_rows; output_rows--) {
+          if (!is_a_ge_zero_and_a_lt_b(input_row, height)) {
+            for (int output_cols = output_w; output_cols; output_cols--) {
+              data_col++;
+            }
+          } else {
+            int input_col = -pad_w + kernel_col;
+            for (int output_col = output_w; output_col; output_col--) {
+              if (is_a_ge_zero_and_a_lt_b(input_col, width)) {
+                *(data_col) = data_im[input_row * width + input_col];
+              }
+              data_col++;
+              input_col += 1;
+            }
+          }
+          input_row += 1;
+        }
+      }
+    }
+  }
+}
+
+
 template <typename Dtype>
 void im2col_cpu(const Dtype* data_im, const int channels,
     const int height, const int width, const int kernel_h, const int kernel_w,
@@ -22,6 +65,12 @@ void im2col_cpu(const Dtype* data_im, const int channels,
     const int stride_h, const int stride_w,
     const int dilation_h, const int dilation_w,
     Dtype* data_col) {
+    
+    
+    if (dilation_h == 1 && dilation_w == 1 && stride_h == 1 && stride_w)
+      return im2col_cpu_one_one(data_im, channels, height, width, kernel_h, kernel_w, pad_h, pad_w, data_col);
+      
+      
   const int output_h = (height + 2 * pad_h -
     (dilation_h * (kernel_h - 1) + 1)) / stride_h + 1;
   const int output_w = (width + 2 * pad_w -
